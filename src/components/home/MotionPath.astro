---
import Beans from "./Beans.astro";
import Cup from "./Cup.astro";
import Portofilters from "./Portofilters.astro";
import RoastedBeans from "./RoastedBeans.astro";
import Since from "./Since.astro";
---

<div class="motion-path relative mx-auto h-[calc(100%+320px)] max-w-6xl">
  <!-- Main SVG Path -->
  <svg
    width="100%"
    height="100%"
    viewBox="0 0 1021 3018"
    fill="none"
    class="relative overflow-visible"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      id="path"
      d="M535 1V1C535 50.9818 494.482 91.5 444.5 91.5H154.5C79.9416 91.5 19.5 151.942 19.5 226.5V526C19.5 600.558 79.9416 661 154.5 661H400C474.558 661 535 721.442 535 796V1346C535 1420.56 595.442 1481 670 1481H884.5C959.058 1481 1019.5 1541.44 1019.5 1616V2223.5C1019.5 2298.06 959.058 2358.5 884.5 2358.5H136C61.4416 2358.5 1 2418.94 1 2493.5V2793C1 2867.56 61.4416 2928 136 2928H447C496.153 2928 536 2967.85 536 3017V3017"
      stroke="#97D5D0"
      stroke-width="2"
      stroke-dasharray="4 7"></path>
    <path
      id="droplet"
      d="M23 20.3755C23 26.7955 17.8513 32 11.5 32C5.14872 32 -3.34002e-06 26.7955 -3.34002e-06 20.3755C-3.34002e-06 13.9555 11.5 0 11.5 0C11.5 0 23 13.9555 23 20.3755Z"
      fill="#97D5D0"></path>
  </svg>

  <div
    id="beans-section"
    class="absolute right-0 mx-auto w-fit"
    data-progress="0.12"
    style={{ visibility: "hidden" }}
  >
    <Beans />
  </div>

  <div
    id="aroma-section"
    class="absolute mx-auto flex w-full justify-center"
    data-progress="0.32"
    style={{ visibility: "hidden" }}
  >
    <Portofilters />
  </div>

  <div
    id="tools-section"
    class="pointer-events-auto absolute w-full"
    data-progress="0.54"
    style={{ visibility: "hidden" }}
  >
    <RoastedBeans />
  </div>

  <div
    id="products-section"
    class="absolute right-0 mx-auto w-fit"
    data-progress="0.89"
    style={{ visibility: "hidden" }}
  >
    <Since />
  </div>

  <div id="heritage-section" class="mt-5 w-full">
    <Cup />
  </div>
</div>

<script>
  import { pathEase } from "@/lib/pathEaseHelper";
  import { gsap } from "gsap";
  import { MotionPathPlugin } from "gsap/MotionPathPlugin";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import {
    durations,
    staggerDelays,
    performanceUtils,
    prefersReducedMotion,
  } from "@/lib/animations";

  gsap.registerPlugin(MotionPathPlugin, ScrollTrigger);

  // Position components along the path
  function positionComponentsAlongPath(preserveVisibility = false) {
    const path = document.querySelector("#path") as SVGPathElement;
    if (!path) return;

    const rawPath = MotionPathPlugin.getRawPath(path);
    const sections = document.querySelectorAll("[data-progress]");

    sections.forEach((section) => {
      const progress = parseFloat(section.getAttribute("data-progress") || "0");
      const point = MotionPathPlugin.getPositionOnPath(rawPath, progress);

      const props: any = { top: point.y };

      if (!preserveVisibility) {
        props.opacity = 0;
        props.scale = 0.95;
      }

      gsap.set(section, props);

      if (!preserveVisibility) {
        performanceUtils.optimizeForTransform(section as HTMLElement);
      }
    });
  }

  // Animate components into view on scroll with staggered timing
  function animateComponentsOnScroll() {
    const sections = document.querySelectorAll("[data-progress]");

    // Check for reduced motion preference
    const shouldAnimate = !prefersReducedMotion();

    sections.forEach((section, index) => {
      (section as HTMLElement).style.visibility = "visible";
      const animation = {
        opacity: 1,
        scale: 1,
        duration: shouldAnimate ? durations.normal : 0.01,
        ease: shouldAnimate ? "power1.out" : "none",
        delay: shouldAnimate ? index * staggerDelays.tight : 0,
        scrollTrigger: {
          once: true,
          trigger: section,
          start: "top 80%",
          end: "bottom 20%",
          onComplete: () => {
            // Remove will-change after animation completes for performance
            performanceUtils.removeWillChange(section as HTMLElement);
          },
        },
      };

      // For reduced motion users, just show the elements without transforms
      if (!shouldAnimate) {
        gsap.set(section, {
          opacity: 1,
          scale: 1,
        });
        return;
      }

      gsap.to(section, animation);
    });
  }

  // Set up initial state and animations
  gsap.set("#droplet", {
    scale: 0.8,
    scaleY: 1,
    transformOrigin: "50% 65%",
  });

  // let lastDir = 1;

  gsap.to("#droplet", {
    scrollTrigger: {
      trigger: ".motion-path",
      start: "top center",
      end: () =>
        "+=" +
        (document.querySelector(".motion-path")?.getBoundingClientRect()
          .height || 1000),
      scrub: 3,
      onUpdate: (self) => {
        const rawProgress = self.progress;
        const progress = gsap.utils.clamp(
          0,
          1,
          (rawProgress - 0.9) / 0.1, // map 0.9‑1.0 → 0‑1
        );

        // const dir = self.direction;

        const startColor = { r: 151, g: 213, b: 208 }; // #97D5D0
        const endColor = { r: 101, g: 67, b: 33 }; // #654321 (coffee brown)

        const r = Math.round(
          startColor.r + (endColor.r - startColor.r) * progress,
        );
        const g = Math.round(
          startColor.g + (endColor.g - startColor.g) * progress,
        );
        const b = Math.round(
          startColor.b + (endColor.b - startColor.b) * progress,
        );

        // if (dir !== lastDir) {
        //   lastDir = dir;
        //   gsap.to('#droplet', {
        //     rotation: '+=180',
        //     duration: 0.2,
        //     overwrite: 'auto',
        //   });
        // }

        gsap.set("#droplet", {
          fill: `rgb(${r}, ${g}, ${b})`,
        });
      },
    },
    ease: pathEase("#path", { smooth: 20 }),
    immediateRender: true,
    motionPath: {
      path: "#path",
      align: "#path",
      alignOrigin: [0.5, 0.5],
      autoRotate: 270,
    },
  });

  ScrollTrigger.addEventListener("scrollStart", () => {
    gsap.to("#droplet", {
      scaleY: 1.2,
      duration: 0.3,
      overwrite: "auto",
    });
  });

  ScrollTrigger.addEventListener("scrollEnd", () => {
    gsap.to("#droplet", {
      scaleY: 1,
      duration: 1,
      ease: "power2.out",
      overwrite: "auto",
    });
  });

  // Initialize positioning when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    positionComponentsAlongPath();
    animateComponentsOnScroll();

    // Reposition on window resize
    window.addEventListener("resize", () => {
      positionComponentsAlongPath(true);
      ScrollTrigger.refresh();
    });
  });
</script>
